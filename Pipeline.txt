Goal: Find important features of the review text

Create clean, similarly organized data: translate all parts into single format
Look at patterns of the test data set and find reoccurring features:

    1. Emojis: convert to text with emoji.csv
        - ✔ find which emojis are even found in the test file: some are not found
        - redo the .csv file to good and bad
    - remove quotes (high priority, after checking for emojis since some use quotes)

    2. Number Star Review: convert "4 stars", 'three stars' into a separate class: distinguishable
        i.e. 4 stars != very good; 4 stars = 'review=4' or 4stars (but this would be special case during the # removable phase)
        issue:
            - ✔ 3 5 stars -> change to 3.5 stars
            - ✔ 10/10 change to 10
            - added the # and 'stars' to stop words (or else double counted).
            i.e remove instances of 3.5, 'star', 'stars' just for that review
            -- words: stars, star kept for now
    3. ✔ keep ! and ? next word but in the same order and only ?!: i.e. MATTER!!!!!!!!???????!!!!!!!! -> MATTER?!
        or separate ! and ? and keep all of them
        - count number of ! and ?

    4. (maybe not) keep capitals (unless training data doesnt have as much)
    - find number of all capitalized words

    Not implemented: Misspelt word count?
    - keep misspellings and then count number of words that are misspelt then change them into real words
    - 'aaaaaaa' -> a
    - 'Goood' -> good
    - 'OMGGGGG' -> OMG
    - 'sooooo' -> so

    5.✔ Count number of positive words and neg words in each review.
        - match pos and neg words from each review w given neg and pos words dataset.

    ************** TODO ***************************

    6. Figure out how to classify neutral words
    - go through only the neutral reviews and see the most frequent words -> this will be our main dictionary to increase
    neutral word score
    - same thing for each of pos and neg words.
    - diff the difference between which words often occur only in their category.
    - Will become a final dictionary to sort each category in sentiment function

    - technical details: use the original text reviews pkl and do a full regex substitution to replace all special chars
    numbers with ' '. then use the alg to seperate words that are attached (if any, i.e. NOThere -> NOT here)
    - there are some words that has 'not' in front of them (e.g not good), but our algorithm only counts them as good for
    positive word. so we should detect if there is a 'not' word in front of a pos words, the pos word counts should be
    decrease by one, same for negative words.
    - we can use afin to generate sent score for each word and get the total sent score as one of the attribute.
        https://nealcaren.org/lessons/wordlists/
    

    7. find the difference, ratios between neural and pos and neg sentiment word count
    - perhaps some words have different weight, i.e. 'amazing' makes it almost certain that it is a good review

    8. using the reports, find which reviews were missclassified and look at the original csv to find any differences



    Basic Stop Words, filtering:

    1. use stop list given
    2. filter by frequency and only keep the top X number of words




